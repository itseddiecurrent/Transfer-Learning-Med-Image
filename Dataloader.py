# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1b8c6QhDcQsTktz4qExDTJK8iFH9hwvDN
"""

! pip install kaggle
! mkdir ~/.kaggle
! cp kaggle.json ~/.kaggle/
! chmod 600 ~/.kaggle/kaggle.json

! kaggle datasets download nikhilpandey360/chest-xray-masks-and-labels

! unzip chest-xray-masks-and-labels.zip
! rm chest-xray-masks-and-labels.zip

import torch
from torch.utils.data import Dataset
from torchvision import datasets
from torchvision.transforms import ToTensor
import matplotlib.pyplot as plt
import os
import pandas as pd
from torchvision.io import read_image
from pathlib import Path
from functools import partial
import cv2
from PIL import Image
import numpy as np
import sklearn.neighbors as knn
from skimage import io
from torchvision.transforms import Normalize
import glob

class TrainData(torch.utils.data.Dataset):
  def __init__(self, img_data, mask_data, soft_encoding = True):
    self.img_data = sorted(img_data)
    self.mask_data = sorted(mask_data)
  def __len__(self):
    return len(self.img_data)
  def __getitem__(self, i):
    pngs = self.img_data[i]
    masks = self.mask_data[i]
    with h5py.File(pngs, 'r'), h5py.File(masks, 'r') as png_data, mask_data:
        input = png_data.value            
        target = mask_data.value.astype(np.uint8)
        # Padding is done to compensate for the convolution
        input = np.pad(input,((5,5),(5,5)), mode='constant')
        target = np.pad(target,((5,5),(5,5)),mode='constant')
    return (torch.from_numpy(input), torch.from_numpy(target))

def create_training_datasets(img_path, mask_path):
    train_data = TrainData(img_path, mask_path)
    return train_data

PNGPATH = "data/Lung Segmentation/CXR_png"
MASKPATH = "data/Lung Segmentation/masks"

loaded_data = create_training_datasets(PNGPATH, MASKPATH)
